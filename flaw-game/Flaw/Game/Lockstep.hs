{-|
Module: Flaw.Game.Lockstep
Description: Deterministic synchronization using lockstep method.
License: MIT
-}

{-# LANGUAGE TypeFamilies #-}

module Flaw.Game.Lockstep
	( Lockstep(..)
	) where

-- | Lockstep synchronization.
-- Allows to support rich state between server and client,
-- using small amount of data sent over network
-- thanks to deterministic step function.
class Lockstep a where
	-- | Global immutable configuration for synchronization.
	data LockstepConfig a :: *
	-- | State of the logic without intents.
	data LockstepState a :: *
	-- | Player's intent.
	-- Piece of data client is sending to server.
	data LockstepIntent a :: *
	-- | State seed generated by server from previous state and intents.
	data LockstepSeed a :: *
	-- | Merge intents.
	lockstepMergeIntents :: LockstepConfig a -> LockstepIntent a -> LockstepIntent a -> LockstepIntent a
	-- | Rebase intent onto other state.
	lockstepRebaseIntent :: LockstepConfig a -> LockstepState a -> LockstepState a -> LockstepIntent a -> LockstepIntent a
	-- | Deterministic simulation step.
	lockstepTick :: LockstepConfig a -> LockstepSeed a -> LockstepState a -> LockstepState a
